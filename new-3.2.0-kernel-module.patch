diff -ru utadem/Makefile utadem/Makefile
--- utadem/Makefile	2009-10-20 02:46:05.000000000 +0200
+++ utadem/Makefile	2012-03-26 17:32:43.000000000 +0200
@@ -5,7 +5,9 @@
 # Use is subject to license terms.
 #
 
-VERSION = $(shell uname -r)
+ifeq ($(VERSION),)
+	VERSION = $(shell uname -r)
+endif
 ISABITS_CMD = case "`/bin/uname -m`" in x86_64) echo 64;; i?86*|i86*) echo 32;; esac
 ISAINFO = $(shell $(ISABITS_CMD))
 ISA32_SPECIFIC_CPPFLAGS=-m32 -D__WORDSIZE=32
@@ -23,16 +25,16 @@
 
 COBJ = $(C_FILES:%.c=%.o)
 
-CFLAGS += -Wstrict-prototypes
-CFLAGS += -O
-CFLAGS += -fno-strict-aliasing
-CFLAGS += -mpreferred-stack-boundary=4
-#CFLAGS += -march=`uname -m`
-CFLAGS += -falign-functions=4
-CFLAGS += -D_SCCSID
-CFLAGS += -Wall
-CFLAGS += -Wno-unknown-pragmas
-CFLAGS += -DUTDEBUG
+ccflags-y += -Wstrict-prototypes
+ccflags-y += -O
+ccflags-y += -fno-strict-aliasing
+ccflags-y += -mpreferred-stack-boundary=4
+#ccflags-y += -march=`uname -m`
+ccflags-y += -falign-functions=4
+ccflags-y += -D_SCCSID
+ccflags-y += -Wall
+ccflags-y += -Wno-unknown-pragmas
+ccflags-y += -DUTDEBUG
 
 obj-m := $(COBJ)
 
@@ -40,7 +42,7 @@
 
 # make invoked directly
 
-KDIR	:= /lib/modules/$(shell uname -r)/build
+KDIR	:= /lib/modules/$(VERSION)/build
 PWD	:= $(shell pwd)
 
 KOBJ = $(C_FILES:%.c=%.ko)
diff -ru utadem/utadem.c utadem/utadem.c
--- utadem/utadem.c	2009-10-20 02:46:05.000000000 +0200
+++ utadem/utadem.c	2012-03-26 17:32:43.000000000 +0200
@@ -9,6 +9,7 @@
 static char __attribute__ ((unused)) *_SCCSid = "@(#)utadem.c	1.31     09/05/18 SMI";
 #endif  /* defined _SCCSID */
 
+#include <linux/version.h>
 #include <linux/module.h>
 #include <linux/moduleparam.h>
 #include <linux/sched.h>
@@ -23,13 +24,17 @@
 #include <linux/proc_fs.h>
 #include <linux/sound.h>
 #include <linux/soundcard.h>
-#include <linux/smp_lock.h>
+#include <linux/spinlock.h>
+#include <linux/semaphore.h>
 #include <linux/major.h>
 #include <asm/atomic.h>
 #include <asm/uaccess.h>
 
 #include "utadem.h"
 
+#define init_MUTEX(_m) sema_init(_m,1)
+#define init_MUTEX_LOCKED(_m) sema_init(_m,0)
+
 /*
  * utadem - Audio Device Emulation
  *
@@ -403,12 +408,12 @@
 
 /* the global list of active sessions (struct uta_session) */
 static LIST_HEAD(session_list);
-static spinlock_t sesslist_lock = SPIN_LOCK_UNLOCKED;
+DEFINE_SPINLOCK(sesslist_lock);
 
 /* the global session bitmask */
 static int sessbits_count; /* count of ulongs in the array */
 static unsigned long *session_bits;
-static spinlock_t sessbits_lock = SPIN_LOCK_UNLOCKED;
+DEFINE_SPINLOCK(sessbits_lock);
 
 /* module parameters */
 static int max_sessions = 2048;	  /* Maximum number of sessions */
@@ -455,9 +460,9 @@
 static int daemon_write(struct file *file, const char *ubuf, size_t size);
 static unsigned int user_poll(struct file *file,
     struct poll_table_struct *wait);
-static int user_ioctl(struct inode *inode, struct file *file,
+static long user_ioctl(struct inode *inode, struct file *file,
     unsigned int cmd, unsigned long arg);
-static int daemon_ioctl(struct inode *inode, struct file *file,
+static long daemon_ioctl(struct inode *inode, struct file *file,
     unsigned int cmd, unsigned long arg);
 
 static int oss_ioctl(struct inode *inode, struct file *file,
@@ -1733,7 +1738,7 @@
  * all the user ioctl() helper functions are open to re-entrancy - protect
  * them with conn->syscall_rwsem, if needed.
  */
-static int
+static long
 user_ioctl(struct inode *inode, struct file *file, unsigned int cmd,
     unsigned long arg)
 {
@@ -1758,7 +1763,7 @@
  * This function is re-entrant - protect each block internally with read or
  * write locking on conn->syscall_rwsem!
  */
-static int
+static long
 daemon_ioctl(struct inode *inode, struct file *file, unsigned int cmd,
     unsigned long arg)
 {
@@ -1779,7 +1784,11 @@
 		if (!capable(CAP_SYS_ADMIN))
 			return (-EPERM);
 		down_write(&conn->syscall_rwsem);
-		ret = do_newsession(conn, current->uid);
+		#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
+			ret = do_newsession(conn, current->uid);
+		#else
+			ret = do_newsession(conn, current->cred->uid);
+		#endif
 		up_write(&conn->syscall_rwsem);
 		return (ret);
 	}
@@ -2439,13 +2448,13 @@
 	return (ret);
 }
 
-static int
-utadem_ioctl(struct inode *inode, struct file *file, unsigned int cmd,
-    unsigned long arg)
+static long
+utadem_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 {
-	int ret;
+	long ret;
 	struct uta_connect *conn = connect((struct uta_connect *) file->private_data);
 	struct uta_session *sess = ref_session(conn->session);
+	struct inode *inode = file->f_dentry->d_inode; 
 
 	DPRINTF(2, "entering %s()\n", __FUNCTION__);
 
@@ -2463,15 +2472,15 @@
 static long
 utadem_compat_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 {
-	int ret;
+	long ret;
 
 	DPRINTF(2, "entering %s()\n", __FUNCTION__);
 
-	lock_kernel();				/* Big Kernel Lock */
-	ret = utadem_ioctl(file->f_dentry->d_inode, file, cmd, arg);
-	unlock_kernel();
+	ret = utadem_ioctl(file, cmd, arg);
+
+	DPRINTF(2, "exiting %s()\n", __FUNCTION__);
 
-	return (long)(ret);
+	return ret;
 }
 
 static int
@@ -2604,7 +2613,7 @@
 	read:		utadsp_read,
 	write:		utadsp_write,
 	poll:		utadsp_poll,
-	ioctl:		utadem_ioctl,
+	unlocked_ioctl:	utadem_ioctl,
 	compat_ioctl:	utadem_compat_ioctl,
 	open:		utadsp_open,
 	release:	utadsp_release,
@@ -2690,7 +2699,7 @@
 static struct file_operations utamix_fops = {
 	owner:		THIS_MODULE,
 	llseek:		no_llseek,
-	ioctl:		utadem_ioctl,
+        unlocked_ioctl: utadem_ioctl,
 	open:		utamix_open,
 	release:	utamix_release,
 };
diff -ru utadem/utadem.h utadem/utadem.h
--- utadem/utadem.h	2009-10-20 02:46:05.000000000 +0200
+++ utadem/utadem.h	2012-03-26 17:32:43.000000000 +0200
@@ -14,7 +14,10 @@
 
 #if defined(CONFIG_COMPAT) || defined(CONFIG_SPARC64) || defined(CONFIG_X86_64) || defined(CONFIG_PPC64)
 #include <asm/uaccess.h>
+#include <linux/version.h>
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,22)
 #include <linux/ioctl32.h>
+#endif
 #include <linux/compat.h>
 #endif	/* CONFIG_COMPAT */
 
diff -ru utdisk/Makefile utdisk/Makefile
--- utdisk/Makefile	2009-10-20 02:46:08.000000000 +0200
+++ utdisk/Makefile	2012-03-26 17:32:43.000000000 +0200
@@ -5,7 +5,9 @@
 # Use is subject to license terms.
 #
 
-VERSION = $(shell uname -r)
+ifeq ($(VERSION),)
+	VERSION = $(shell uname -r)
+endif
 ISABITS_CMD = case "`/bin/uname -m`" in x86_64) echo 64;; i?86*|i86*) echo 32;; esac
 ISAINFO = $(shell $(ISABITS_CMD))
 ISA32_SPECIFIC_CPPFLAGS=-m32 -D__WORDSIZE=32
@@ -25,13 +27,13 @@
 
 COBJ = $(C_FILES:%.c=%.o)
 
-CFLAGS += -Wstrict-prototypes
-CFLAGS += -O
-CFLAGS += -fno-strict-aliasing
-CFLAGS += -mpreferred-stack-boundary=4
-CFLAGS += -falign-functions=4
-CFLAGS += -Wall
-#CFLAGS += -DUTDEBUG
+ccflags-y += -Wstrict-prototypes
+ccflags-y += -O
+ccflags-y += -fno-strict-aliasing
+ccflags-y += -mpreferred-stack-boundary=4
+ccflags-y += -falign-functions=4
+ccflags-y += -Wall
+#ccflags-y += -DUTDEBUG
 
 obj-m := $(COBJ)
 
@@ -39,7 +41,7 @@
 
 # make invoked directly
 
-KDIR	:= /lib/modules/$(shell uname -r)/build
+KDIR	:= /lib/modules/$(VERSION)/build
 PWD	:= $(shell pwd)
 
 KOBJ = $(C_FILES:%.c=%.ko)
diff -ru utdisk/utdisk.c utdisk/utdisk.c
--- utdisk/utdisk.c	2009-10-20 02:46:08.000000000 +0200
+++ utdisk/utdisk.c	2012-03-26 17:32:43.000000000 +0200
@@ -15,6 +15,7 @@
  */
 
 /* includes */
+#include <linux/version.h>
 #include <linux/module.h>		/* module macros */
 #include <linux/blkdev.h>		/* blk_ functions */
 #include <linux/hdreg.h>		/* HDIO */
@@ -22,7 +23,8 @@
 #include <linux/init.h>			/* __init macro */
 #include <linux/fd.h>			/* FDEJECT */
 #include <linux/cdrom.h>		/* CDROMEJECT */
-#include <linux/smp_lock.h>		/* lock_kernel */
+#include <linux/spinlock.h>
+#include <linux/semaphore.h>
 #include <scsi/scsi.h>			/* command values*/
 #include <scsi/scsi_ioctl.h>		/* SCSI_IOCTL_SEND_COMMAND */
 #include <scsi/scsi_cmnd.h>		/* MAX_COMMAND_SIZE */
@@ -45,16 +47,26 @@
 
 static int utdisk_init(void);
 static void utdisk_exit(void);
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,28)
 static int utdisk_open(struct inode *inodep, struct file *fp);
 static int utdisk_release(struct inode *inodep, struct file *fp);
-static int utdisk_media_changed(struct gendisk *gdp);
-static int utdisk_revalidate_disk(struct gendisk *gdp);
-static int utdisk_getgeo(struct block_device *bdevp, struct hd_geometry *geo);
 static int utdisk_ioctl(struct inode *inodep, struct file *fp,
 			unsigned int cmd, unsigned long arg);
 static long utdisk_compat_ioctl(struct file *fp,
 			unsigned int cmd, unsigned long arg);
-static int utdisk_make_request(request_queue_t *q, struct bio *bio);
+#else /* LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,28) */
+static int utdisk_open(struct block_device *, fmode_t);
+static int utdisk_release(struct gendisk *, fmode_t);
+static int utdisk_ioctl(struct block_device *, fmode_t,
+			unsigned int cmd, unsigned long arg);
+static int utdisk_compat_ioctl(struct block_device *, fmode_t,
+			unsigned int cmd, unsigned long arg);
+#endif /* LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,28) */
+static int utdisk_media_changed(struct gendisk *gdp);
+static int utdisk_revalidate_disk(struct gendisk *gdp);
+
+static int utdisk_getgeo(struct block_device *bdevp, struct hd_geometry *geo);
+static int utdisk_make_request(struct request_queue *q, struct bio *bio);
 static int utdisk_scsi_command(utdisk_state_t *dsp, struct block_device *bdevp,
 			unsigned long arg, int flag32ptr);
 
@@ -68,7 +80,15 @@
 static struct block_device_operations utdisk_bd_ops = {
 	.owner =		THIS_MODULE,
 	.open =			utdisk_open,
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,28)
+	.ioctl =		utdisk_ioctl,
+#else
+	#if LINUX_VERSION_CODE > KERNEL_VERSION(3,0,0)
 	.ioctl =		utdisk_ioctl,
+	#else
+	.locked_ioctl =		utdisk_ioctl,
+	#endif
+#endif
 	.compat_ioctl =		utdisk_compat_ioctl,
 	.release =		utdisk_release,
 	.media_changed =	utdisk_media_changed,
@@ -164,6 +184,7 @@
 	utprintf("%s\n", __FUNCTION__);
 
 	if (utdisk_major != 0) {
+ 	        remove_proc_entry("driver/utdisk", NULL);
 		unregister_blkdev(utdisk_major, UTDISK_DISK_DRV_NAME);
 		utdisk_major = 0;
 		utstk_set_disk_major(utdisk_major);
@@ -179,11 +200,25 @@
 
 /* open */
 static int
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,28)
 utdisk_open(struct inode *inodep, struct file *fp)
 {
+#else
+utdisk_open(struct block_device *b, fmode_t fm)
+{
+	struct inode tmpinode;
+	struct inode *inodep = &tmpinode;
+	struct file tmpfile;
+	struct file *fp = &tmpfile;
+#endif
 	struct gendisk	*gdp;
 	utdisk_state_t	*dsp;
 	minor_t		minnum;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,28)
+	inodep->i_bdev = b;
+	inodep->i_rdev = b->bd_dev;
+	fp->f_mode = fm;
+#endif
 
 	if ((inodep == NULL)
 		|| (inodep->i_bdev == NULL)
@@ -220,8 +255,12 @@
 	check_disk_change(inodep->i_bdev);
 	utprintf("%s: minor=%d [%s] usage=%d\n",
 		__FUNCTION__, minnum,
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,28)
 		((char *)(fp->f_dentry->d_name.name)
 				? (char *)(fp->f_dentry->d_name.name) : "null"),
+#else
+		"null",
+#endif
 		dsp->opens);
 
 	return 0;	/* success */
@@ -230,11 +269,22 @@
 
 /* release */
 static int
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,28)
 utdisk_release(struct inode *inodep, struct file *fp)
 {
+#else
+utdisk_release(struct gendisk *gd, fmode_t fm)
+{
+	struct inode tmpinode;
+	struct inode *inodep = &tmpinode;
+#endif
 	struct gendisk	*gdp;
 	utdisk_state_t	*dsp;
 	minor_t		minnum;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,28)
+	inodep->i_bdev = bdget_disk(gd, 0);
+	inodep->i_rdev = disk_devt(gd);
+#endif
 
 	if ((inodep == NULL)
 		|| (inodep->i_bdev == NULL)
@@ -268,9 +318,17 @@
 
 /* ioctl */
 static int
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,28)
 utdisk_ioctl(struct inode *inodep, struct file *fp, unsigned int cmd,
 	unsigned long arg)
 {
+#else
+utdisk_ioctl(struct block_device *b, fmode_t fm,
+	unsigned int cmd, unsigned long arg)
+{
+	struct inode tmpinode;
+	struct inode *inodep = &tmpinode;
+#endif
 	struct block_device	*bdevp;
 	struct gendisk		*gdp;
 	utdisk_state_t		*dsp;
@@ -282,6 +340,10 @@
 	char			*copy_ptr;
 	int			copy_len;
 	int			ret;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,28)
+	inodep->i_bdev = b;
+	inodep->i_rdev = b->bd_dev;
+#endif
 
 	flag32ptr = (cmd & UTDISK_32BIT_PTRS);
 	cmd &= ~UTDISK_32BIT_PTRS;
@@ -357,19 +419,32 @@
 /*
  * ioctl called by 32bit user process into 64bit kernel
  */
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,28)
 static long
 utdisk_compat_ioctl(struct file *fp, unsigned int cmd, unsigned long arg)
 {
+#else
+static int
+utdisk_compat_ioctl(struct block_device *b, fmode_t fm,
+	unsigned int cmd, unsigned long arg)
+{
+#endif
 	int	ret;
 
 	utprintf("%s: cmd = %x\n", __FUNCTION__, cmd);
 
-	lock_kernel();		/* Big Kernel Lock */
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,28)
 	ret = utdisk_ioctl(fp->f_dentry->d_inode, fp, (cmd | UTDISK_32BIT_PTRS),
 			arg);
-	unlock_kernel();
+#else
+	ret = utdisk_ioctl(b, fm, (cmd | UTDISK_32BIT_PTRS), arg);
+#endif
 
-	return (long)(ret);
+	return
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,28)
+		(long)
+#endif
+		(ret);
 }
 
 
@@ -392,12 +467,20 @@
 	unsigned int 		buflen;
 	int 			ret;
 	int			senselen;
+	uid_t			uid;
+	uid_t			owner;
 
+	#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,28)
+		uid = current->uid;
+	#else
+		uid = current->cred->uid;
+	#endif
+	owner = dsp->owner;
 	utprintf("%s: caller %d, owner %d\n", __FUNCTION__,
-				current->uid, dsp->owner);
-	if ((current->uid != 0) && (dsp->owner != current->uid)) {
+				uid, owner);
+	if ((uid != 0) && (owner != uid)) {
 		utprintf("%s: caller %d not owner %d\n", __FUNCTION__,
-				current->uid, dsp->owner);
+				uid, owner);
 		return (-EACCES);
 	}
 
@@ -612,7 +695,7 @@
  * On error, call bio_endio(..., -error), but still return 0
  */
 static int
-utdisk_make_request(request_queue_t *qp, struct bio *biop)
+utdisk_make_request(struct request_queue *qp, struct bio *biop)
 {
 	struct block_device	*bdevp;
 	struct gendisk		*gdp;
diff -ru utdisk/utdiskctl.c utdisk/utdiskctl.c
--- utdisk/utdiskctl.c	2009-10-20 02:46:08.000000000 +0200
+++ utdisk/utdiskctl.c	2012-03-26 17:32:43.000000000 +0200
@@ -23,7 +23,8 @@
 #include <linux/init.h>			/* module entry-point macros */
 #include <linux/fs.h>			/* device entry points */
 #include <linux/proc_fs.h>		/* create_proc_read_entry */
-#include <linux/smp_lock.h>		/* lock_kernel */
+#include <linux/spinlock.h>
+#include <linux/semaphore.h>
 #include <asm/uaccess.h>		/* userland access */
 #include "utdisk.h"
 #include "utdiskctl.h"
@@ -61,8 +62,7 @@
 				size_t count, loff_t *ppos);
 static ssize_t	utstk_file_write(struct file *fp, const char *bufp,
 				size_t count, loff_t *ppos);
-static int	utstk_ioctl(struct inode *inode, struct file *fp,
-				unsigned int command, unsigned long arg);
+static long	utstk_ioctl(struct file *fp, unsigned int command, unsigned long arg);
 static long	utstk_compat_ioctl(struct file *fp,
 				unsigned int command, unsigned long arg);
 static int	utstk_get_ctl_major(unsigned long arg, int flag32ptr);
@@ -92,7 +92,7 @@
 	.write		= utstk_file_write,
 	.open		= utstk_open,
 	.release	= utstk_release,
-	.ioctl		= utstk_ioctl,
+	.unlocked_ioctl	= utstk_ioctl,
 	.compat_ioctl	= utstk_compat_ioctl,
 	.owner		= THIS_MODULE,
 };
@@ -154,7 +154,6 @@
 static struct block_device_operations *utdisk_bd_ops;	/* bd ops */
 static utdc_mlist_t	mlist;			/* minor number pool */
 
-
 /* static function definitions */
 
 /*
@@ -277,6 +276,7 @@
 	}
 
 	if (utdc_major != 0) {
+		remove_proc_entry("driver/utdiskctl", NULL);
 		unregister_chrdev_region(MKDEV(utdc_major,
 						UTDISK_MASTER_INSTANCE),
 					UTDISK_MAXMINOR);
@@ -537,24 +537,21 @@
 static long
 utstk_compat_ioctl(struct file *fp, unsigned int command, unsigned long arg)
 {
-	int	ret;
+	long	ret;
 
 	utprintf("%s: cmd=%x\n", __FUNCTION__, command);
-	lock_kernel();			/* Big Kernel Lock */
-	ret = utstk_ioctl(fp->f_dentry->d_inode, fp,
-					(command | UTDISK_32BIT_PTRS), arg);
-	unlock_kernel();
+	ret = utstk_ioctl(fp, (command | UTDISK_32BIT_PTRS), arg);
 
-	return (long)(ret);
+	return ret;
 }
 
 
 /* ioctl */
-static int
-utstk_ioctl(struct inode *inode, struct file *fp, unsigned int command,
-		unsigned long arg)
+static long
+utstk_ioctl(struct file *fp, unsigned int command, unsigned long arg)
 {
 	utdisk_state_t	*dsp;
+ 	struct inode *inode = fp->f_dentry->d_inode;
 	minor_t		mnum = iminor(inode);
 	int		ret = 0;
 	int		flag32ptr;
@@ -711,7 +708,7 @@
 		return (-ENOMEM);
 	}
 	/* set hardware block size */
-	blk_queue_hardsect_size(dsp->rqp, dinfo.block_size);
+	blk_queue_logical_block_size(dsp->rqp, dinfo.block_size);
 
 	dinfo.ctlmin = dsp->ctlmin;
 	if (dinfo.block_size != UTDISK_HARDSECT_SIZE_BYTES) {
diff -ru utdisk/utdiskctl.h utdisk/utdiskctl.h
--- utdisk/utdiskctl.h	2009-10-20 02:46:08.000000000 +0200
+++ utdisk/utdiskctl.h	2012-03-26 17:32:43.000000000 +0200
@@ -25,15 +25,19 @@
 #include <linux/ioctl.h>
 #if defined(CONFIG_COMPAT) || defined(CONFIG_SPARC64) || defined(CONFIG_X86_64) || defined(CONFIG_PPC64)
 #include <asm/uaccess.h>
+#include <linux/version.h>
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,22)
 #include <linux/ioctl32.h>
+#endif
 #include <linux/compat.h>
 #endif	/* CONFIG_COMPAT */
 
 /* macro and constant definitions */
-#ifndef __WORDSIZE
-#error __WORDSIZE not defined
+//#include <asm/types.h>
+#if !defined(BITS_PER_LONG)
+#error BITS_PER_LONG not defined
 #endif
-#if __WORDSIZE == 64
+#if BITS_PER_LONG == 64
 #ifndef _LP64
 #define	_LP64	1
 #endif
diff -ru utdisk/utdisk.h utdisk/utdisk.h
--- utdisk/utdisk.h	2009-10-20 02:46:08.000000000 +0200
+++ utdisk/utdisk.h	2012-03-26 17:32:43.000000000 +0200
@@ -24,13 +24,23 @@
 
 /* includes */
 #include <linux/types.h>			/* integer types */
+#include <linux/version.h>
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,26)
 #include <asm/semaphore.h>			/* struct semaphore */
+#else
+#include <linux/semaphore.h>			/* struct semaphore */
+#endif
 #include <linux/blkdev.h>			/* make_request_fn */
 #include <linux/cdev.h>				/* struct cdev */
 #include <linux/wait.h>				/* wait_queue_head_t */
 #include "utdiskctl.h"				/* minor_t */
 
 /* macro and constant definitions */
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,24)
+# define bio_endio(b, s, e) bio_endio((b), (s), (e));
+#else
+# define bio_endio(b, s, e) bio_endio((b), (e));
+#endif
 
 #ifdef	UTDEBUG
 #define	utprintf(args...)	printk(KERN_INFO args)
diff -ru utio/Makefile utio/Makefile
--- utio/Makefile	2009-10-20 02:46:06.000000000 +0200
+++ utio/Makefile	2012-03-26 17:32:43.000000000 +0200
@@ -5,7 +5,9 @@
 # Use is subject to license terms.
 #
 
-VERSION = $(shell uname -r)
+ifeq ($(VERSION),)
+	VERSION = $(shell uname -r)
+endif
 ISABITS_CMD = case "`/bin/uname -m`" in x86_64) echo 64;; i?86*|i86*) echo 32;; esac
 ISAINFO = $(shell $(ISABITS_CMD))
 ISA32_SPECIFIC_CPPFLAGS=-m32 -D__WORDSIZE=32
@@ -23,16 +25,16 @@
 
 COBJ = $(C_FILES:%.c=%.o)
 
-CFLAGS += -Wstrict-prototypes
-CFLAGS += -O
-CFLAGS += -fno-strict-aliasing
-CFLAGS += -mpreferred-stack-boundary=4
-#CFLAGS += -march=`uname -m`
-CFLAGS += -falign-functions=4
-CFLAGS += -D_SCCSID
-CFLAGS += -Wall
-CFLAGS += -Wno-unknown-pragmas
-CFLAGS += -DUTDEBUG
+ccflags-y += -Wstrict-prototypes
+ccflags-y += -O
+ccflags-y += -fno-strict-aliasing
+ccflags-y += -mpreferred-stack-boundary=4
+#ccflags-y += -march=`uname -m`
+ccflags-y += -falign-functions=4
+ccflags-y += -D_SCCSID
+ccflags-y += -Wall
+ccflags-y += -Wno-unknown-pragmas
+ccflags-y += -DUTDEBUG
 
 obj-m := $(COBJ)
 
@@ -40,7 +42,7 @@
 
 # make invoked directly
 
-KDIR	:= /lib/modules/$(shell uname -r)/build
+KDIR	:= /lib/modules/$(VERSION)/build
 PWD	:= $(shell pwd)
 
 KOBJ = $(C_FILES:%.c=%.ko)
diff -ru utio/utio.c utio/utio.c
--- utio/utio.c	2009-10-20 02:46:06.000000000 +0200
+++ utio/utio.c	2012-03-26 17:32:43.000000000 +0200
@@ -9,10 +9,12 @@
 static char __attribute__ ((unused)) *_SCCSid = "@(#)utio.c	1.11	09/05/15 SMI";
 #endif	/* defined _SCCSID */
 
+#include <linux/version.h>
 #include <linux/module.h>
 #include <linux/moduleparam.h>
 #include <linux/fs.h>
-#include <linux/smp_lock.h>
+#include <linux/spinlock.h>
+#include <linux/semaphore.h>
 #include <linux/sched.h>
 #include <linux/types.h>
 #include <linux/errno.h>
@@ -31,6 +33,8 @@
 
 #include "utio.h"
 
+#define init_MUTEX(_m) sema_init(_m,1)
+#define init_MUTEX_LOCKED(_m) sema_init(_m,0)
 
 /* get major number at load time */
 #define	UTIO_MAJOR	0
@@ -152,12 +156,12 @@
 
 /* the global list of active sessions (struct uta_session) */
 static LIST_HEAD(session_list);
-static spinlock_t sesslist_lock = SPIN_LOCK_UNLOCKED;
+DEFINE_SPINLOCK(sesslist_lock);
 
 /* the global session bitmask */
 static int sessbits_count; /* count of ulongs in the array */
 static unsigned long *session_bits;
-static spinlock_t sessbits_lock = SPIN_LOCK_UNLOCKED;
+DEFINE_SPINLOCK(sessbits_lock);
 
 /* dynamic utio major number */
 static unsigned int utio_major = UTIO_MAJOR;
@@ -877,7 +881,11 @@
 	pmsg.msgtype = UTIO_MSG_WRITE;
 	pmsg.cmd = 0;
 	memset(&pmsg.args, 0, sizeof (pmsg.args));
-	pmsg.uid = current->uid;
+	#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
+		pmsg.uid = current->uid;
+	#else
+		pmsg.uid = current->cred->uid;
+	#endif
 	pmsg.datasize = buf->bytes;
 	send_msg_to_master(sess, &pmsg);
 
@@ -1017,7 +1025,11 @@
 	pmsg.msgtype = UTIO_MSG_READ;
 	pmsg.cmd = 0;
 	memset(&pmsg.args, 0, sizeof (pmsg.args));
-	pmsg.uid = current->uid;
+	#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
+		pmsg.uid = current->uid;
+	#else
+		pmsg.uid = current->cred->uid;
+	#endif
 	pmsg.datasize = buf->bytes;
 	send_msg_to_master(sess, &pmsg);
 
@@ -1258,16 +1270,23 @@
 	struct uta_session *sess = conn->session;
 	utio_pmsg_t pmsg;
 	int ret;
+	uid_t uid;
 
 	DPRINTF(2, "entering %s()\n", __FUNCTION__);
 
 	if (!sess || !has_daemon(sess))
 		return (-ENXIO);
 
+	#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
+		uid = current->uid;
+	#else
+		uid = current->cred->uid;
+	#endif
+
 	pmsg.magic = UTIO_MAGIC;
 	pmsg.version = UTIO_VERSION;
 	pmsg.msgtype = UTIO_MSG_IOCTL;
-	pmsg.uid = current->uid;
+	pmsg.uid = uid;
 	pmsg.datasize = 0;
 	memset(&pmsg.args, 0, sizeof (pmsg.args));
 
@@ -1282,7 +1301,7 @@
 			}
 			memset(&pmsg, 0, sizeof (pmsg));
 			ret = do_getmsg_from_master(sess, &pmsg,
-					current->uid, UTIO_MSG_IOCTL);
+					uid, UTIO_MSG_IOCTL);
 			if (!ret && (pmsg.msgtype == UTIO_MSG_IOCTL) &&
 			    (pmsg.response == UTIO_MSG_ACK)) {
 				return (0);
@@ -1308,7 +1327,7 @@
 
 			memset(&pmsg, 0, sizeof (pmsg));
 			ret = do_getmsg_from_master(sess, &pmsg,
-					current->uid, UTIO_MSG_IOCTL);
+					uid, UTIO_MSG_IOCTL);
 			if (!ret && (pmsg.msgtype == UTIO_MSG_IOCTL) &&
 			    (pmsg.response == UTIO_MSG_ACK)) {
 				return (0);
@@ -1333,7 +1352,7 @@
 
 			memset(&pmsg, 0, sizeof (pmsg));
 			ret = do_getmsg_from_master(sess, &pmsg,
-					current->uid, UTIO_MSG_IOCTL);
+					uid, UTIO_MSG_IOCTL);
 			if (!ret && (pmsg.msgtype == UTIO_MSG_IOCTL) &&
 			    (pmsg.response == UTIO_MSG_ACK)) {
 				return (0);
@@ -1360,7 +1379,7 @@
 
 			memset(&pmsg, 0, sizeof (pmsg));
 			ret = do_getmsg_from_master(sess, &pmsg,
-					current->uid, UTIO_MSG_IOCTL);
+					uid, UTIO_MSG_IOCTL);
 			if (!ret && (pmsg.msgtype == UTIO_MSG_IOCTL) &&
 			    (pmsg.response == UTIO_MSG_ACK)) {
 				return (0);
@@ -1384,7 +1403,7 @@
 
 			memset(&pmsg, 0, sizeof (pmsg));
 			ret = do_getmsg_from_master(sess, &pmsg,
-					current->uid, UTIO_MSG_IOCTL);
+					uid, UTIO_MSG_IOCTL);
 			if (!ret && (pmsg.msgtype == UTIO_MSG_IOCTL) &&
 			    (pmsg.response == UTIO_MSG_ACK)) {
 				return (0);
@@ -1405,7 +1424,7 @@
 
 			memset(&pmsg, 0, sizeof (pmsg));
 			ret = do_getmsg_from_master(sess, &pmsg,
-					current->uid, UTIO_MSG_IOCTL);
+					uid, UTIO_MSG_IOCTL);
 			if (!ret && (pmsg.msgtype == UTIO_MSG_IOCTL) &&
 			    (pmsg.response == UTIO_MSG_ACK)) {
 				return (put_user(pmsg.args.intval,
@@ -1424,7 +1443,7 @@
 
 			memset(&pmsg, 0, sizeof (pmsg));
 			ret = do_getmsg_from_master(sess, &pmsg,
-					current->uid, UTIO_MSG_IOCTL);
+					uid, UTIO_MSG_IOCTL);
 			if (!ret && (pmsg.msgtype == UTIO_MSG_IOCTL) &&
 			    (pmsg.response == UTIO_MSG_ACK)) {
 				return (copy_to_user((struct winsize *)
@@ -1444,7 +1463,7 @@
 
 			memset(&pmsg, 0, sizeof (pmsg));
 			ret = do_getmsg_from_master(sess, &pmsg,
-					current->uid, UTIO_MSG_IOCTL);
+					uid, UTIO_MSG_IOCTL);
 			if (!ret && (pmsg.msgtype == UTIO_MSG_IOCTL) &&
 			    (pmsg.response == UTIO_MSG_ACK)) {
 				return (copy_to_user((struct termios *)
@@ -1464,7 +1483,7 @@
 
 			memset(&pmsg, 0, sizeof (pmsg));
 			ret = do_getmsg_from_master(sess, &pmsg,
-					current->uid, UTIO_MSG_IOCTL);
+					uid, UTIO_MSG_IOCTL);
 			if (!ret && (pmsg.msgtype == UTIO_MSG_IOCTL) &&
 			    (pmsg.response == UTIO_MSG_ACK)) {
 				return (copy_to_user((struct termio *)
@@ -1487,16 +1506,23 @@
 	struct uta_session *sess = conn->session;
 	utio_pmsg_t pmsg;
 	int ret;
+	uid_t uid;
 
 	DPRINTF(2, "entering %s()\n", __FUNCTION__);
 
 	if (!sess || !has_daemon(sess))
 		return (-ENXIO);
 
+	#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
+		uid = current->uid;
+	#else
+		uid = current->cred->uid;
+	#endif
+
 	pmsg.magic = UTIO_MAGIC;
 	pmsg.version = UTIO_VERSION;
 	pmsg.msgtype = UTIO_MSG_IOCTL;
-	pmsg.uid = current->uid;
+	pmsg.uid = uid;
 	pmsg.datasize = 0;
 	memset(&pmsg.args, 0, sizeof (pmsg.args));
 
@@ -1513,7 +1539,7 @@
 
 			memset(&pmsg, 0, sizeof (pmsg));
 			ret = do_getmsg_from_master(sess, &pmsg,
-					current->uid, UTIO_MSG_IOCTL);
+					uid, UTIO_MSG_IOCTL);
 			if (!ret && (pmsg.msgtype == UTIO_MSG_IOCTL) &&
 			    (pmsg.response == UTIO_MSG_ACK)) {
 				return (put_user(pmsg.args.intval,
@@ -1539,7 +1565,7 @@
 
 			memset(&pmsg, 0, sizeof (pmsg));
 			ret = do_getmsg_from_master(sess, &pmsg,
-					current->uid, UTIO_MSG_IOCTL);
+					uid, UTIO_MSG_IOCTL);
 			if (!ret && (pmsg.msgtype == UTIO_MSG_IOCTL) &&
 			    (pmsg.response == UTIO_MSG_ACK)) {
 				return (put_user(pmsg.args.intval,
@@ -1563,7 +1589,7 @@
 
 			memset(&pmsg, 0, sizeof (pmsg));
 			ret = do_getmsg_from_master(sess, &pmsg,
-					current->uid, UTIO_MSG_IOCTL);
+					uid, UTIO_MSG_IOCTL);
 			if (!ret && (pmsg.msgtype == UTIO_MSG_IOCTL) &&
 			    (pmsg.response == UTIO_MSG_ACK)) {
 				return (copy_to_user((struct timeval *)
@@ -1588,6 +1614,7 @@
 	compat_utio_pmsg_t pmsg32;
 	int ret;
 	struct inode *inode = file->f_dentry->d_inode;
+	uid_t uid;
 
 	/* only one ioctl needs conversion */
 	if (cmd != COMPAT_PPGETTIME)
@@ -1599,10 +1626,16 @@
 	 */
 	DPRINTF(2, "entering %s()\n", __FUNCTION__);
 
+	#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
+		uid = current->uid;
+	#else
+		uid = current->cred->uid;
+	#endif
+
 	pmsg.magic = UTIO_MAGIC;
 	pmsg.version = UTIO_VERSION;
 	pmsg.msgtype = UTIO_MSG_IOCTL;
-	pmsg.uid = current->uid;
+	pmsg.uid = uid;
 	pmsg.datasize = 0;
 	memset(&pmsg.args, 0, sizeof (pmsg.args));
 
@@ -1621,7 +1654,7 @@
 
 	memset(&pmsg, 0, sizeof (pmsg));
 	ret = do_getmsg_from_master(sess, &pmsg,
-			current->uid, UTIO_MSG_IOCTL);
+			uid, UTIO_MSG_IOCTL);
 	if (!ret && (pmsg.msgtype == UTIO_MSG_IOCTL) &&
 	    (pmsg.response == UTIO_MSG_ACK))
 	{
@@ -1675,9 +1708,16 @@
 	struct uta_connect *conn = file->private_data;
 	struct uta_session *sess = conn->session;
 	int ret;
+	uid_t uid;
 
 	DPRINTF(2, "entering %s()\n", __FUNCTION__);
 
+	#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
+		uid = current->uid;
+	#else
+		uid = current->cred->uid;
+	#endif
+
 	/* these don't require the session to exist */
 	switch (cmd) {
 	case UTIO_GETVERSION:
@@ -1692,7 +1732,7 @@
 		DPRINTF(3, " - UTIO_GETDEVID\n");
 
 		down_write(&conn->syscall_rwsem);
-		ret = do_newsession(conn, current->uid);
+		ret = do_newsession(conn, uid);
 		up_write(&conn->syscall_rwsem);
 		return (ret);
 	}
@@ -1713,7 +1753,7 @@
 		DPRINTF(3, "- UTIO_GETMSG\n");
 		down_read(&conn->syscall_rwsem);
 		ret = do_getmsg_from_slave(sess, (utio_pmsg_t *)arg,
-			    file->f_flags & O_NONBLOCK, current->uid, 0);
+			    file->f_flags & O_NONBLOCK, uid, 0);
 		if (ret < 0) {
 			if (is_disc(sess)) {
 				disc_session(file->private_data);
@@ -1780,8 +1820,13 @@
 		case COMPAT_UTIO_GETMSG:
 			DPRINTF(3, "- UTIO_GETMSG\n");
 			down_read(&conn->syscall_rwsem);
-			ret = do_getmsg_from_slave(sess, &parm64,
-				    file->f_flags & O_NONBLOCK, current->uid, 1);
+			#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
+				ret = do_getmsg_from_slave(sess, &parm64,
+					    file->f_flags & O_NONBLOCK, current->uid, 1);
+			#else
+				ret = do_getmsg_from_slave(sess, &parm64,
+					    file->f_flags & O_NONBLOCK, current->cred->uid, 1);
+			#endif
 			if (ret < 0) {
 				if (is_disc(sess)) {
 					disc_session(file->private_data);
@@ -1820,6 +1865,7 @@
 	struct uta_session *sess;
 	utio_pmsg_t pmsg;
 	int ret;
+	uid_t uid;
 
 	DPRINTF(2, "entering %s(sessid=%d, readfrom=%d, writeto=%d)\n",
 		__FUNCTION__, sessid, !!readfrom, !!writeto);
@@ -1845,6 +1891,12 @@
 		goto out_unlock;
 	}
 
+	#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
+		uid = current->uid;
+	#else
+		uid = current->cred->uid;
+	#endif
+
 	/* init the connection */
 	conn->session = sess;
 	conn->role = UTA_USER;
@@ -1861,7 +1913,7 @@
 	pmsg.msgtype = UTIO_MSG_OPEN;
 	pmsg.cmd = sessid;
 	memset(&pmsg.args, 0, sizeof (pmsg.args));
-	pmsg.uid = current->uid;
+	pmsg.uid = uid;
 	pmsg.datasize = 0;
 
 	/* Check the return value of send_msg_to_master */
@@ -1870,7 +1922,7 @@
 	}
 
 	memset(&pmsg, 0, sizeof (pmsg));
-	ret = do_getmsg_from_master(sess, &pmsg, current->uid,
+	ret = do_getmsg_from_master(sess, &pmsg, uid,
 				    UTIO_MSG_OPEN);
 	if (is_disc(sess)) {
 		DPRINTF(3, "slave open failed\n");
@@ -2005,12 +2057,12 @@
 	return (ret);
 }
 
-static int
-utio_ioctl(struct inode *inode, struct file *file, unsigned int cmd,
-    unsigned long arg)
+static long
+utio_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 {
 	int ret;
 	struct uta_connect *conn;
+	struct inode *inode = file->f_dentry->d_inode; 
 
 	DPRINTF(2, "entering %s()\n", __FUNCTION__);
 
@@ -2041,7 +2093,6 @@
 
 	DPRINTF(2, "entering %s()\n", __FUNCTION__);
 
-	lock_kernel();
 	switch (cmd) {
 
 #if defined(CONFIG_COMPAT) || defined(CONFIG_SPARC64) || defined(CONFIG_X86_64) || defined(CONFIG_PPC64)
@@ -2057,10 +2108,9 @@
 #endif	/* CONFIG_COMPAT */
 
 	default:
-		ret = utio_ioctl(file->f_dentry->d_inode, file, cmd, arg);
+		ret = utio_ioctl(file, cmd, arg);
 		break;
 	}
-	unlock_kernel();
 
 	return (ret);
 }
@@ -2128,6 +2178,7 @@
 	struct uta_session *sess;
 	utio_pmsg_t pmsg;
 	int ret;
+	uid_t uid;
 
 	DPRINTF(2, "entering %s()\n", __FUNCTION__);
 
@@ -2166,6 +2217,13 @@
 	} else if (conn->role == UTA_USER) {
 		DPRINTF(3, "disconnecting USER from session %d\n",
 			sess->id);
+
+		#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
+			uid = current->uid;
+		#else
+			uid = current->cred->uid;
+		#endif
+
 		/* sync, no ACK required */
 		/* device_sync(sess, 0); */
 		/* tell the daemon we're gone */
@@ -2174,14 +2232,14 @@
 		pmsg.msgtype = UTIO_MSG_CLOSE;
 		pmsg.cmd = sess->id;
 		memset(&pmsg.args, 0, sizeof (pmsg.args));
-		pmsg.uid = current->uid;
+		pmsg.uid = uid;
 		pmsg.datasize = 0;
 
 		ret = send_msg_to_master(sess, &pmsg);
 		if (!ret) {
 			memset(&pmsg, 0, sizeof (pmsg));
 			ret = do_getmsg_from_master(sess, &pmsg,
-					current->uid, UTIO_MSG_CLOSE);
+					uid, UTIO_MSG_CLOSE);
 			if (!ret && (pmsg.msgtype == UTIO_MSG_CLOSE) &&
 			    (pmsg.response == UTIO_MSG_ACK)) {
 				DPRINTF(3, "ACK received for UTIO_MSG_CLOSE\n");
@@ -2225,7 +2283,7 @@
 	read:		utio_read,
 	write:		utio_write,
 	poll:		utio_poll,
-	ioctl:		utio_ioctl,
+        unlocked_ioctl: utio_ioctl,
 	compat_ioctl:	utio_compat_ioctl,
 	open:		utio_open,
 	release:	utio_release,
diff -ru utio/utio.h utio/utio.h
--- utio/utio.h	2009-10-20 02:46:06.000000000 +0200
+++ utio/utio.h	2012-03-26 17:32:43.000000000 +0200
@@ -9,7 +9,10 @@
 
 #if defined(CONFIG_COMPAT) || defined(CONFIG_SPARC64) || defined(CONFIG_X86_64) || defined(CONFIG_PPC64)
 #include <asm/uaccess.h>
+#include <linux/version.h>
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,22)
 #include <linux/ioctl32.h>
+#endif
 #include <linux/compat.h>
 #endif	/* CONFIG_COMPAT */
 
