diff -r -u utdisk.orig/Makefile utdisk/Makefile
--- utdisk.orig/Makefile	2008-09-25 22:26:50.000000000 +0200
+++ utdisk/Makefile	2008-11-24 23:24:06.000000000 +0100
@@ -25,13 +25,13 @@
 
 COBJ = $(C_FILES:%.c=%.o)
 
-CFLAGS += -Wstrict-prototypes
-CFLAGS += -O
-CFLAGS += -fno-strict-aliasing
-CFLAGS += -mpreferred-stack-boundary=4
-CFLAGS += -falign-functions=4
-CFLAGS += -Wall
-#CFLAGS += -DUTDEBUG
+EXTRA_CFLAGS += -Wstrict-prototypes
+EXTRA_CFLAGS += -O
+EXTRA_CFLAGS += -fno-strict-aliasing
+EXTRA_CFLAGS += -mpreferred-stack-boundary=4
+EXTRA_CFLAGS += -falign-functions=4
+EXTRA_CFLAGS += -Wall
+#EXTRA_CFLAGS += -DUTDEBUG
 
 obj-m := $(COBJ)
 
diff -r -u utdisk.orig/utdisk.c utdisk/utdisk.c
--- utdisk.orig/utdisk.c	2008-09-25 22:26:50.000000000 +0200
+++ utdisk/utdisk.c	2008-12-01 02:37:42.000000000 +0100
@@ -15,6 +15,7 @@
  */
 
 /* includes */
+#include <linux/version.h>
 #include <linux/module.h>		/* module macros */
 #include <linux/blkdev.h>		/* blk_ functions */
 #include <linux/hdreg.h>		/* HDIO */
@@ -45,16 +46,26 @@
 
 static int utdisk_init(void);
 static void utdisk_exit(void);
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,28)
 static int utdisk_open(struct inode *inodep, struct file *fp);
 static int utdisk_release(struct inode *inodep, struct file *fp);
-static int utdisk_media_changed(struct gendisk *gdp);
-static int utdisk_revalidate_disk(struct gendisk *gdp);
-static int utdisk_getgeo(struct block_device *bdevp, struct hd_geometry *geo);
 static int utdisk_ioctl(struct inode *inodep, struct file *fp,
 			unsigned int cmd, unsigned long arg);
 static long utdisk_compat_ioctl(struct file *fp,
 			unsigned int cmd, unsigned long arg);
-static int utdisk_make_request(request_queue_t *q, struct bio *bio);
+#else /* LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,28) */
+static int utdisk_open(struct block_device *, fmode_t);
+static int utdisk_release(struct gendisk *, fmode_t);
+static int utdisk_ioctl(struct block_device *, fmode_t,
+			unsigned int cmd, unsigned long arg);
+static int utdisk_compat_ioctl(struct block_device *, fmode_t,
+			unsigned int cmd, unsigned long arg);
+#endif /* LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,28) */
+static int utdisk_media_changed(struct gendisk *gdp);
+static int utdisk_revalidate_disk(struct gendisk *gdp);
+
+static int utdisk_getgeo(struct block_device *bdevp, struct hd_geometry *geo);
+static int utdisk_make_request(struct request_queue *q, struct bio *bio);
 static int utdisk_scsi_command(utdisk_state_t *dsp, struct block_device *bdevp,
 			unsigned long arg, int flag32ptr);
 
@@ -68,7 +79,11 @@
 static struct block_device_operations utdisk_bd_ops = {
 	.owner =		THIS_MODULE,
 	.open =			utdisk_open,
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,28)
 	.ioctl =		utdisk_ioctl,
+#else
+	.locked_ioctl =		utdisk_ioctl,
+#endif
 	.compat_ioctl =		utdisk_compat_ioctl,
 	.release =		utdisk_release,
 	.media_changed =	utdisk_media_changed,
@@ -179,11 +194,25 @@
 
 /* open */
 static int
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,28)
 utdisk_open(struct inode *inodep, struct file *fp)
 {
+#else
+utdisk_open(struct block_device *b, fmode_t fm)
+{
+	struct inode tmpinode;
+	struct inode *inodep = &tmpinode;
+	struct file tmpfile;
+	struct file *fp = &tmpfile;
+#endif
 	struct gendisk	*gdp;
 	utdisk_state_t	*dsp;
 	minor_t		minnum;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,28)
+	inodep->i_bdev = b;
+	inodep->i_rdev = b->bd_dev;
+	fp->f_mode = fm;
+#endif
 
 	if ((inodep == NULL)
 		|| (inodep->i_bdev == NULL)
@@ -220,8 +249,12 @@
 	check_disk_change(inodep->i_bdev);
 	utprintf("%s: minor=%d [%s] usage=%d\n",
 		__FUNCTION__, minnum,
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,28)
 		((char *)(fp->f_dentry->d_name.name)
 				? (char *)(fp->f_dentry->d_name.name) : "null"),
+#else
+		"null",
+#endif
 		dsp->opens);
 
 	return 0;	/* success */
@@ -230,11 +263,22 @@
 
 /* release */
 static int
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,28)
 utdisk_release(struct inode *inodep, struct file *fp)
 {
+#else
+utdisk_release(struct gendisk *gd, fmode_t fm)
+{
+	struct inode tmpinode;
+	struct inode *inodep = &tmpinode;
+#endif
 	struct gendisk	*gdp;
 	utdisk_state_t	*dsp;
 	minor_t		minnum;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,28)
+	inodep->i_bdev = bdget_disk(gd, 0);
+	inodep->i_rdev = disk_devt(gd);
+#endif
 
 	if ((inodep == NULL)
 		|| (inodep->i_bdev == NULL)
@@ -268,9 +312,17 @@
 
 /* ioctl */
 static int
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,28)
 utdisk_ioctl(struct inode *inodep, struct file *fp, unsigned int cmd,
 	unsigned long arg)
 {
+#else
+utdisk_ioctl(struct block_device *b, fmode_t fm,
+	unsigned int cmd, unsigned long arg)
+{
+	struct inode tmpinode;
+	struct inode *inodep = &tmpinode;
+#endif
 	struct block_device	*bdevp;
 	struct gendisk		*gdp;
 	utdisk_state_t		*dsp;
@@ -282,6 +334,10 @@
 	char			*copy_ptr;
 	int			copy_len;
 	int			ret;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,28)
+	inodep->i_bdev = b;
+	inodep->i_rdev = b->bd_dev;
+#endif
 
 	flag32ptr = (cmd & UTDISK_32BIT_PTRS);
 	cmd &= ~UTDISK_32BIT_PTRS;
@@ -357,19 +413,34 @@
 /*
  * ioctl called by 32bit user process into 64bit kernel
  */
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,28)
 static long
 utdisk_compat_ioctl(struct file *fp, unsigned int cmd, unsigned long arg)
 {
+#else
+static int
+utdisk_compat_ioctl(struct block_device *b, fmode_t fm,
+	unsigned int cmd, unsigned long arg)
+{
+#endif
 	int	ret;
 
 	utprintf("%s: cmd = %x\n", __FUNCTION__, cmd);
 
 	lock_kernel();		/* Big Kernel Lock */
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,28)
 	ret = utdisk_ioctl(fp->f_dentry->d_inode, fp, (cmd | UTDISK_32BIT_PTRS),
 			arg);
+#else
+	ret = utdisk_ioctl(b, fm, (cmd | UTDISK_32BIT_PTRS), arg);
+#endif
 	unlock_kernel();
 
-	return (long)(ret);
+	return
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,28)
+		(long)
+#endif
+		(ret);
 }
 
 
@@ -612,7 +683,7 @@
  * On error, call bio_endio(..., -error), but still return 0
  */
 static int
-utdisk_make_request(request_queue_t *qp, struct bio *biop)
+utdisk_make_request(struct request_queue *qp, struct bio *biop)
 {
 	struct block_device	*bdevp;
 	struct gendisk		*gdp;
diff -r -u utdisk.orig/utdiskctl.h utdisk/utdiskctl.h
--- utdisk.orig/utdiskctl.h	2008-09-25 22:26:50.000000000 +0200
+++ utdisk/utdiskctl.h	2008-11-25 00:07:03.000000000 +0100
@@ -25,15 +25,19 @@
 #include <linux/ioctl.h>
 #if defined(CONFIG_COMPAT) || defined(CONFIG_SPARC64) || defined(CONFIG_X86_64) || defined(CONFIG_PPC64)
 #include <asm/uaccess.h>
+#include <linux/version.h>
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,22)
 #include <linux/ioctl32.h>
+#endif
 #include <linux/compat.h>
 #endif	/* CONFIG_COMPAT */
 
 /* macro and constant definitions */
-#ifndef __WORDSIZE
-#error __WORDSIZE not defined
+//#include <asm/types.h>
+#if !defined(BITS_PER_LONG)
+#error BITS_PER_LONG not defined
 #endif
-#if __WORDSIZE == 64
+#if BITS_PER_LONG == 64
 #ifndef _LP64
 #define	_LP64	1
 #endif
diff -r -u utdisk.orig/utdisk.h utdisk/utdisk.h
--- utdisk.orig/utdisk.h	2008-09-25 22:26:50.000000000 +0200
+++ utdisk/utdisk.h	2008-11-26 02:30:30.000000000 +0100
@@ -24,13 +24,23 @@
 
 /* includes */
 #include <linux/types.h>			/* integer types */
+#include <linux/version.h>
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,26)
 #include <asm/semaphore.h>			/* struct semaphore */
+#else
+#include <linux/semaphore.h>			/* struct semaphore */
+#endif
 #include <linux/blkdev.h>			/* make_request_fn */
 #include <linux/cdev.h>				/* struct cdev */
 #include <linux/wait.h>				/* wait_queue_head_t */
 #include "utdiskctl.h"				/* minor_t */
 
 /* macro and constant definitions */
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,24)
+# define bio_endio(b, s, e) bio_endio((b), (s), (e));
+#else
+# define bio_endio(b, s, e) bio_endio((b), (e));
+#endif
 
 #ifdef	UTDEBUG
 #define	utprintf(args...)	printk(KERN_INFO args)
